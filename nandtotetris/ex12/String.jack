// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */




class String {

	field int strCurrLength;
	field int maxLen;
	field Array StrArr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        		let maxLen = Math.max(maxLength,1);
		let StrArr = Array.new(maxLen);
		let strCurrLength = 0;
		return this;

    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
		return;

    }

    /** Returns the current length of this string. */
    method int length() {
    		return strCurrLength;

    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        	return StrArr[j];

    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let StrArr[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (strCurrLength < maxLen){
			let StrArr[strCurrLength] = c;
			let strCurrLength = strCurrLength + 1;
		}
		return this;

    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (strCurrLength > 0){
            let strCurrLength = strCurrLength - 1;
        }
		return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val;
        var int idx;
        var int sign;
        var boolean flag;  // true if is negative
        let idx = 0;
        let val = 0;
		let flag = false;
		let sign = StrArr[0];

		if (sign = 45){
			let idx = 1;
			let flag = true;
		}
		while (idx<strCurrLength){
			let  idx = idx + 1;
			let val =  val * 10 + StrArr[idx]-48;

		}
		if (flag){
			return -val;
		}
		return val;

    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let strCurrLength = 0;

        if(val < 0){
            let val = -val;
            do appendChar(45);
        }

        do setIntHelper(val);

        return;

    }

    method void setIntHelper(int val){
        if(val < 10){
            do appendChar(val + 48);
        }else{
            do setIntHelper(val/10);
            do appendChar(val - ((val/10) * 10)+ 48);
        }

        return;
	}

    /** Returns the new line character. */
    function char newLine() {
        		return (128);
    }

    /** Returns the backspace character. */
    function char backSpace() {
    		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        		return 34;
    }
}