// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array freeList;
    static Array heap;

    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null

        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[0] = 14334; //nextBlock
        let heap[1] = 0; //len
        return;
    }

    //todo-done
    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    //todo-done
    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address]=value;
        return;
    }

    //todo-need todo!
    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.


        var int curBlockPtr, curLen;
        var int prev;
        var int curBlock, nextBlock;

        let curBlockPtr = freeList;
        // while not arrive to the end of freelst
        while (~(curBlockPtr = 0)) {
            let nextBlock = curBlockPtr[1];
            let curLen =  curBlockPtr[0];
            if(curLen > size ){
                if (curLen = size + 2){
                    let size = size + 1;
                }
                let curBlock = curBlockPtr + curLen - size;
                let curBlockPtr[0] = curLen - size - 1;
                if (curBlockPtr[0] < 1){
                    if (~(prev = 0)) {
                     let prev[1] = nextBlock;
                     }
                     else{
                        let freeList = nextBlock;
                     }
           }
                let curBlock[-1] =  size +1 ;
                return curBlock;

            }

            else{
                let prev = curBlockPtr;
                let curBlockPtr = nextBlock;
      }

        }
        return -1;





    }
    //todo-need todo!

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList

        var int seg;
		let seg = o-1;
		let seg[0] =o[-1];
		let seg[1] = freeList;
		let freeList = seg;
		return;

    }    

    //todo-done

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int tempIndex, max,size;
        let max=o[0];
        let tempIndex=0;
        let size=o[0];

        while(tempIndex<size){
            if(o[tempIndex]>max){
                let max=o[tempIndex];
            }
            let tempIndex=tempIndex+1;
    }
    return max;
}
}
