// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT
        outM[16],        // M value output
        writeM,          // Write into M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //A-register:
    //means if is an a command(instuction[15] == 0) -> c1= 1 -> inA= instruction

    Not(in=instruction[15], out= c1);
    Mux16(a=ALUout, b=instruction, sel=c1, out=inA);
    //treat the load bit of A-register:
    Or(a= c1, b= instruction[5], out=loadA);
    ARegister(in= inA, load=loadA , out=outA, out[0..14]=addressM);

    //D-register
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD , out=outD);

    //ALU
    //y-input for ALU:
    Mux16(a=outA, b=inM, sel=instruction[12], out=inY);
    ExtendAlu(x= outD, y=inY, instruction = instruction[6..14], out=ALUout, out=outM,
    zr=zrOut, ng=ngOut);

    //PC
    //Truth table is load = (J1 & zr) or (J2 & ng) or (J0 & (not zr) & (not ng))
    And(a=zrOut, b=instruction[1], out= p1); // output ALU is equal to zero
    And(a=ngOut, b=instruction[2], out= p2); // output ALU is less than zero ( < 0)

    Not(in=zrOut, out=notzr);
    Not(in=ngOut, out=notng);
    And(a=notzr, b=instruction[0], out= tmp1);
    And(a=tmp1, b=notng, out= p3); //output ALU is greater than zero ( > 0)

    // p1 or p2 or p3
    Or(a=p1, b=p2, out=tmp2);
    Or(a=tmp2, b=p3, out=Tload);

    And(a=instruction[15], b= Tload, out=loadBit);

    PC(in=outA, load= loadBit, inc=true, reset= reset, out[0..14]= pc);
    // write M
    And(a=instruction[3], b=instruction[15], out=writeM);



}
